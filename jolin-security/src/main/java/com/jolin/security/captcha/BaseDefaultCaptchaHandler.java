package com.jolin.security.captcha;

import cn.hutool.core.map.MapUtil;
import cn.hutool.core.util.StrUtil;
import com.jolin.common.dto.ResultDTO;
import com.jolin.common.util.CommonBeanUtil;
import com.jolin.common.util.CommonCacheUtil;
import com.jolin.security.BaseAuthenticationRequestDTO;
import com.jolin.security.BaseSecurityException;

/**
 * The verification code processing class is generated by default
 */
public class BaseDefaultCaptchaHandler implements BaseCaptchaHandler {

    private static final String captchaEnableOn = "on";
    private static final String captchaRedisKeyPre = "base:captcha";
    private static final String captchaSameIpLimitRedisKeyPre = "base:ipLimitPerMinutes";

    //Whether to enable verification code logic
    private String captchaEnable ;

    //Validity period of the verification code, expressed in seconds
    private Long captchaMaxWaitSecond ;

    //Limit the number of verification code requests per minute for the same IP address
    private Long captchaSameIpLimitPerMinutes ;

    private CommonCacheUtil commonCacheUtil;

    public BaseDefaultCaptchaHandler(String captchaEnable, Long captchaMaxWaitSecond,
                                     Long captchaSameIpLimitPerMinutes,CommonCacheUtil commonCacheUtil) {
        this.captchaEnable = captchaEnable;
        this.captchaMaxWaitSecond = captchaMaxWaitSecond;
        this.captchaSameIpLimitPerMinutes = captchaSameIpLimitPerMinutes;
        this.commonCacheUtil = commonCacheUtil;
    }

    @Override
    public ResultDTO createCaptcha(String clientIp) {
        String ipLimitRedisKey = captchaSameIpLimitRedisKeyPre + ":" + clientIp;
        String time = commonCacheUtil.get(ipLimitRedisKey);
        if (StrUtil.isBlank(time)) {
            //No record, which means no previous false authentication
            time = captchaSameIpLimitPerMinutes + "";
            commonCacheUtil.set(ipLimitRedisKey, time, 60);
        }
        Integer t = Integer.parseInt(time);
        if (t <= 0) {
            throw new BaseSecurityException("This parameter is available only every minute" + captchaSameIpLimitPerMinutes + "times verification code");
        }

        String captchaCode = (int) ((Math.random() * 9 + 1) * 1000) + "";
        String key = CommonBeanUtil.generateBeanId();
        commonCacheUtil.set(captchaRedisKeyPre + ":" + key, captchaCode, captchaMaxWaitSecond);

        commonCacheUtil.increment(ipLimitRedisKey, -1);
        return new ResultDTO(MapUtil.builder()
                .put("captchaKey", key)
                .put("captchaCode", captchaCode)
                .build());
    }

    @Override
    public Boolean checkCaptcha(BaseAuthenticationRequestDTO authenticationRequest) {
        if (captchaEnableOn.equals(captchaEnable)) {
            String captchaKey = authenticationRequest.getCaptchaKey();
            String captchaCode = authenticationRequest.getCaptchaCode();
            //Verification code verification logic is enabled
            if (StrUtil.isBlank(captchaKey)) {
                throw new BaseSecurityException("The verification code Key cannot be empty");
            }
            String storedCaptchaCode = commonCacheUtil.get(captchaRedisKeyPre + ":" + captchaKey);
            if (StrUtil.isBlank(storedCaptchaCode) || !storedCaptchaCode.equals(captchaCode)) {
                throw new BaseSecurityException("The verification code is incorrect or has expired. Refresh the verification code");
            }
        }
        return true;
    }
}
