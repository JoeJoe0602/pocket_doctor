<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jolin.mapper.ChatRecordMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.jolin.domain.ChatRecord">
        <result column="id" property="id"/>
        <result column="sort" property="sort"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>

        <result column="user_id" property="userId"/>
        <result column="doctor_id" property="doctorId"/>
        <result column="content" property="content"/>
        <result column="content_type" property="content_type"/>
        <result column="is_read" property="is_read"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id
        ,
        sort,
        is_delete,
        created_at,
        updated_at,

        user_id,
        doctor_id,
        content,
        content_type,
        is_read
    </sql>

    <select id="getPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        chat_record
        where
        is_delete = 0
        <if test="chat_record.userId != null and chat_record.userId != ''">
            AND userId = #{chatrecord.userId})
        </if>

        <if test="chat_record.doctorId != null and chat_record.doctorId != ''">
            AND doctorId = #{chatrecord.doctorId})
        </if>

    </select>

    <select id="getChatRecord" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        chat_record
        where
        is_delete = 0
        and user_id=#{chat_record.userId} and doctor_id=#{chat_record.doctorId} union
        ( select
        <include refid="Base_Column_List"/>
        from
        chat_record
        where
        is_delete = 0
        and user_id=#{chat_record.doctorId} and doctor_id=#{chat_record.userId} )
        order by create_at desc


    </select>

    <select id="getChatRecordList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
            (
                SELECT
        <include refid="Base_Column_List"/>
                FROM
                    chat_record m
                WHERE
                    (
                            m.user_id IN (  SELECT doctor_id AS chat_id FROM chat_record e WHERE e.user_id = #{chat_record.userId})
                        )
                   OR (
                            m.user_id = #{chat_record.userId}
                        AND m.doctor_id IN (  SELECT doctor_id AS chat_id FROM chat_record e WHERE e.user_id = #{chat_record.userId} ))
                ORDER BY
                    created_at DESC
                    LIMIT 999999
            ) msg
        GROUP BY
            msg.user_id + msg.doctor_id,
            ABS( msg.user_id - msg.doctor_id );


    </select>

</mapper>